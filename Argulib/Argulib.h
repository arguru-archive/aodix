/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Argulib Header
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define ARG_GDI_3D_CLR_OFFSET			0x00202020
#define ARG_GDI_WINDOW_CAPTION_BG_CLR	0x00800000
#define ARG_GDI_CTRL_BG_CLR				0x00404040
#define ARG_FD_MAX_MS_FILES				256

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "windows.h"
#include "stdio.h"
#include "math.h"
#include "objbase.h"
#include "shlobj.h"

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Constants
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
float const arg_dsp_k1pi=atanf(1.0f)*4.0f;
float const arg_dsp_k2pi=atanf(1.0f)*8.0f;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct ARG_DSP_FILTER_COEFFS
{
	float b0a0;
	float b1a0;
	float b2a0;
	float a1a0;
	float a2a0;
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// System functions
double arg_sys_get_cpu_speed(void);
double arg_sys_rdtsc(void);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Tool functions
int arg_tool_clipped_assign(int const value,int const min,int const max);
int arg_tool_check_plane_xy(int const x,int const y,int const zx,int const zy,int const zw,int const zh);
int arg_tool_check_point_in_2d_poly(int const npol,float *xp,float *yp,float const x,float const y);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Tool functions files and directories
void arg_tool_get_filetitle(char* pfilename,char* pfiletitle);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Win32 GDI functions
void arg_gdi_set_clip_rgn(HDC const hdc,int const x,int const y,int const w,int const h);
void arg_gdi_end_clip_rgn(HDC const hdc);
void arg_gdi_paint_line(HDC const hdc,int const x,int const y,int const x2,int const y2,int const pen_style,COLORREF const color);
void arg_gdi_paint_invert_rect(HDC const hdc,int const x,int const y,int const w,int const h);
void arg_gdi_paint_solid_rect(HDC const hdc,int const x,int const y,int const w,int const h,COLORREF const color);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Win32 MENU functions
void arg_menu_add_item(HMENU const hmenu,char* txt,int const id,HMENU const hsubmenu=NULL);
void arg_menu_track(HMENU const hmenu,HWND const hwnd,int const x,int const y);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Browse Folder functions
void arg_browse_folder(HWND const hwnd,char* buf);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// File dialog functions
int arg_file_dialog_open(HINSTANCE const hinstance,HWND const hwnd,char* title,char* filename,char* filter,char* default_extension,char* initial_dir,int const filter_index,int const allow_multi);
int arg_file_dialog_save(HINSTANCE const hinstance,HWND const hwnd,char* title,char* filename,char* filter,char* default_extension,char* initial_dir);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DSP buffer functions
void arg_dsp_zero(float* psrc,int const num_samples);
void arg_dsp_copy(float* psrc,float* pdst,int const num_samples);
void arg_dsp_bmix(float* psrc,float* pdst,int const num_samples);
void arg_dsp_gmix(float* psrc,float* pdst,int const num_samples,float const gain);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DSP functions
void arg_dsp_set_filter_coeffs(ARG_DSP_FILTER_COEFFS* pfc,int const type,float const f,float const q,float const sample_rate);
void arg_dsp_limiter(float& sl,float &sr,float &l_env,float const l_att,float const l_rel);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DSP functions
float arg_dsp_conv(float* psamples,float* pfir,int const num_taps);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Raster rendering functions
void arg_rgba_shade(unsigned char* pp,int const r,int const g,int const b,int const a);
